{"ast":null,"code":"// import React, { createContext, useState } from 'react';\n\n// export const UserContext = createContext({\n//   currentUser: null,\n//   logoutUser: () => {},\n//   loginUser: () => {},\n//   registerUser: () => {},\n//   users: [],\n//   addUser: () => {},\n//   getUsers: () => [],\n//   isAdmin: false  // הוספת שדה לזהות אם המשתמש הוא מנהל\n// });\n\n// export const UserProvider = ({ children }) => {\n//   const [currentUser, setCurrentUser] = useState(null);\n//   const [users, setUsers] = useState([]);\n//   const [isAdmin, setIsAdmin] = useState(false);  // מצב לזיהוי אם המשתמש הוא מנהל\n\n//   const addUser = (userData) => {\n//     setUsers((prevUsers) => [...prevUsers, userData]);\n//   };\n\n//   const getUsers = () => users;\n\n//   const logoutUser = () => {\n//     setCurrentUser(null);\n//     setIsAdmin(false);  // נוודא שכאשר המשתמש מתנתק, הסטטוס לא יהיה מנהל\n//   };\n\n//   const loginUser = (userData) => {\n//     setCurrentUser(userData);\n\n//     const adminPassword = \"1234\"; \n//     const adminEmail=\"manager@gmail.com\";\n\n//      // תעודת זהות של המנהל\n//     if (userData.password === adminPassword && userData.email===adminEmail) {\n//       setIsAdmin(true);  //  , הפוך את המשתמש למנהל\n//     } else {\n//       setIsAdmin(false);\n//     }\n//   };\n\n//   const registerUser = (userData) => {\n//     setCurrentUser(userData);\n//     addUser(userData);\n\n//     const adminID = \"123456789\";  // תעודת זהות של המנהל\n//     if (userData.idNumber === adminID) {\n//       setIsAdmin(true);  // אם תעודת הזהות היא של המנהל, הפוך את המשתמש למנהל\n//     } else {\n//       setIsAdmin(false);\n//     }\n//   };\n\n//   return (\n//     <UserContext.Provider\n//       value={{\n//         currentUser,\n//         logoutUser,\n//         loginUser,\n//         registerUser,\n//         users,\n//         addUser,\n//         getUsers,\n//         isAdmin  // נוסיף את הסטטוס של המנהל פה\n//       }}\n//     >\n//       {children}\n//     </UserContext.Provider>\n//   );\n// };","map":{"version":3,"names":[],"sources":["C:/Users/This User/Documents/reactP/my-store/src/Context/UserContext.js"],"sourcesContent":["// import React, { createContext, useState } from 'react';\r\n\r\n// export const UserContext = createContext({\r\n//   currentUser: null,\r\n//   logoutUser: () => {},\r\n//   loginUser: () => {},\r\n//   registerUser: () => {},\r\n//   users: [],\r\n//   addUser: () => {},\r\n//   getUsers: () => [],\r\n//   isAdmin: false  // הוספת שדה לזהות אם המשתמש הוא מנהל\r\n// });\r\n\r\n// export const UserProvider = ({ children }) => {\r\n//   const [currentUser, setCurrentUser] = useState(null);\r\n//   const [users, setUsers] = useState([]);\r\n//   const [isAdmin, setIsAdmin] = useState(false);  // מצב לזיהוי אם המשתמש הוא מנהל\r\n\r\n//   const addUser = (userData) => {\r\n//     setUsers((prevUsers) => [...prevUsers, userData]);\r\n//   };\r\n\r\n//   const getUsers = () => users;\r\n\r\n//   const logoutUser = () => {\r\n//     setCurrentUser(null);\r\n//     setIsAdmin(false);  // נוודא שכאשר המשתמש מתנתק, הסטטוס לא יהיה מנהל\r\n//   };\r\n\r\n//   const loginUser = (userData) => {\r\n//     setCurrentUser(userData);\r\n\r\n//     const adminPassword = \"1234\"; \r\n//     const adminEmail=\"manager@gmail.com\";\r\n\r\n//      // תעודת זהות של המנהל\r\n//     if (userData.password === adminPassword && userData.email===adminEmail) {\r\n//       setIsAdmin(true);  //  , הפוך את המשתמש למנהל\r\n//     } else {\r\n//       setIsAdmin(false);\r\n//     }\r\n//   };\r\n\r\n//   const registerUser = (userData) => {\r\n//     setCurrentUser(userData);\r\n//     addUser(userData);\r\n\r\n//     const adminID = \"123456789\";  // תעודת זהות של המנהל\r\n//     if (userData.idNumber === adminID) {\r\n//       setIsAdmin(true);  // אם תעודת הזהות היא של המנהל, הפוך את המשתמש למנהל\r\n//     } else {\r\n//       setIsAdmin(false);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <UserContext.Provider\r\n//       value={{\r\n//         currentUser,\r\n//         logoutUser,\r\n//         loginUser,\r\n//         registerUser,\r\n//         users,\r\n//         addUser,\r\n//         getUsers,\r\n//         isAdmin  // נוסיף את הסטטוס של המנהל פה\r\n//       }}\r\n//     >\r\n//       {children}\r\n//     </UserContext.Provider>\r\n//   );\r\n// };\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}